import cv2
import matplotlib as plt
import numpy
from skimage import data
from skimage import color
from skimage import img_as_float
import holoviews as hv
import panel as pn
import sys
import imageio as iio

def ResizeWithAspectRatio(image, width=None, height=None, inter=cv2.INTER_AREA):
    dim = None
    (h, w) = image.shape[:2]

    if width is None and height is None:
        return image
    if width is None:
        r = height / float(h)
        dim = (int(w * r), height)
    else:
        r = width / float(w)
        dim = (width, int(h * r))

    return cv2.resize(image, dim, interpolation=inter)

path = "C:\\Users\\argud\\Downloads\\Images\\2023-12-18-10-44-55.jpg"
img = cv2.imread(path)
resize = ResizeWithAspectRatio(img, width=400)
cv2.imshow("Image 1", resize)
cv2.waitKey(0)
cv2.destroyAllWindows()


img_gray = cv2.cvtColor(resize, cv2.COLOR_BGR2GRAY)
# Blur the image for better edge detection
img_blur = cv2.GaussianBlur(img_gray, (3,3), 0.5)
 
# Canny Edge Detection
edges = cv2.Canny(image=img_blur, threshold1=0, threshold2=50) # Canny Edge Detection
# Display Canny Edge Detection Image
cv2.imshow('Canny Edge Detection', edges)
cv2.waitKey(0)
 
cv2.destroyAllWindows()
pn.extension(sizing_mode="stretch_width")
def tint(red=1, green=1, blue=1):
    return hv.RGB([red, green, blue]*resize)

red = pn.widgets.FloatSlider(value=1, start=0, end=1, name="Red")
green = pn.widgets.FloatSlider(value=0.5, start=0, end=1, name="Green")
blue = pn.widgets.FloatSlider(value=0.5, start=0, end=1, name="Blue")

tint = pn.bind(tint, red=red, green=green, blue=blue)

pn.template.FastListTemplate(
    site="Awesome Panel",
    title="Tinting gray-scale images with Scikit-Image",
    sidebar=["# ðŸŽ¨ Colors", red,green,blue],
    main=[
        pn.Column("# Before", pn.panel(hv.RGB(resize))),
        pn.Column("# After", pn.panel(tint, sizing_mode="stretch_both")),
    ],
    accent_base_color="#ff286e", header_background="#ff286e"
).servable()
